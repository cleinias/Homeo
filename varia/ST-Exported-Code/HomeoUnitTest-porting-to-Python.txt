<?xml version="1.0"?>

<st-source>
<time-stamp>From VisualWorksÂ® NonCommercial, 7.4 of December 5, 2005 on February 19, 2013 at 12:51:39 pm</time-stamp>


<class>
<name>HomeoUnitTest</name>
<environment>Smalltalk</environment>
<super>XProgramming.SUnit.TestCase</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>unit </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Homeostat</category>
<attributes>
<package>Homeostat</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>HomeoUnitTest class</class-id> <category>instance creation</category>

<body package="Homeostat" selector="new">new
	"Answer a newly created and initialized instance."

	^super new initialize</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<comment>
<class-id>HomeoUnitTest</class-id>
<body>HomeoUnitTest tests the HomeoUnit class

Instance Variables:
	unit	&lt;HomeoUnit&gt;	a mock object: a HomeoUnit for testing purposes

</body>
</comment>

<methods>
<class-id>HomeoUnitTest</class-id> <category>running</category>

  <body package="Homeostat" selector="testChangeUniselectorType">testChangeUniselectorType

|goodUniselectors badUniselectors|


goodUniselectors := OrderedCollection new.
badUniselectors := OrderedCollection new.

HomeoUniselector withAllSubclasses do: [:class | goodUniselectors add: class name asString].
badUniselectors add: 'Ashby'; add: 'UniformRandom'; add: 'HomeoUnit'.
unit setDefaultUniselectorSettings.
goodUniselectors 
		do: [ :string|
			unit uniselectorChangeType: string.
			self assert: (unit uniselector class name asString = string).].

unit setDefaultUniselectorSettings.
badUniselectors 
	do: [ :string|
			unit uniselectorChangeType: string.
			self deny: (unit uniselector class name asString = string).].</body>

<body package="Homeostat" selector="testComputeNextDeviationLinear2">testComputeNextDeviationLinear2
	"A standard HomeoUnit increases its value (critiDeviation) at each computational step by the basic formula:
	 critDeviation (n+1) = criticalDev(n) + sum(input * weight)

	The basic formula is complicated by taking into consideration:
	1. noise, which affects both the stability of a unit's critDeviation (as flickering), and the connections to other units (as distortions)
	2. viscosity of the medium
	3. clipping, which limits the maximum/minimum values of critDeviation

	Here we test the basic formula. Viscosity and clipping have their own tests, see the HomeoNois Class for noise testing."

|tempDev errorTolerance|

errorTolerance := 0.


unit needleCompMethod: 'linear'.
unit needleUnit mass: 1.</body>

<body package="Homeostat" selector="testComputeNextDeviationProportional">testComputeNextDeviationProportional

"the polarity of the output controls the change in the criticalDeviation through  simple summation. However, the change is proportional to the range of deviation of the output. 

Here we are checking the runup toward positive infinity (1) and negative infinity (2) (with linear increases)"

unit needleCompMethod: 'proportional'.

" We set noises to 0, viscosity to 1, potentiometer to 1, etc, to check that the basic mechanism works."


"1. with self connection to 1, noise at 0, viscosity to 1 and the unit not connected to other units, the deviation should increase by 1 every cycle if it starts positive" 

unit potentiometer: 1.     "this sets the weight of the self-connection"
unit switch: 1.		   "this sets the polarity of the self-connection"
unit noise:	0.
unit viscosity: 1.
unit criticalDeviation: 1.
unit currentOutput: 2.
unit maxDeviation: 10.
unit selfUpdate.
self assert: (unit criticalDeviation = (1 + (2/ 20)) ).

"2 with starting point negative we still run up to positive infinity"
unit criticalDeviation: -1.
unit currentOutput: 2.
unit maxDeviation: 10.
unit selfUpdate.
self assert: (unit criticalDeviation =( -1 + (2/20))).</body>

<body package="Homeostat" selector="testComputeNextDeviationWithDefaults">testComputeNextDeviationWithDefaults

"checks:
1. that it computes a new value and puts it in the correct iVar
2. that the value is within the unit's limits

tests are performed  with default values "

| highRange lowRange  oldNextDeviation |

highRange := unit maxDeviation.
lowRange := highRange negated.


oldNextDeviation := unit criticalDeviation.
unit selfUpdate.

"1 " self assert: ((oldNextDeviation = (unit criticalDeviation)) not).
"2" self assert: ( unit criticalDeviation between: lowRange and: highRange).</body>

<body package="Homeostat" selector="testDeviationComputationsDontTouchInstanceVariables">testDeviationComputationsDontTouchInstanceVariables
	"Check that the various methods used to compute the critical deviation simply output a value and do not indeed change the actual value of deviation stored in the instance variable"
|aTorqueValue|

unit setRandomValues.
aTorqueValue := (UniformDistribution from: -1 to: 1) random.

unit needleCompMethod: 'linear'.
10 timesRepeat: [|oldDeviation|
				    oldDeviation := unit criticalDeviation.
				    unit newNeedlePosition: aTorqueValue.
                            self assert:(oldDeviation = unit criticalDeviation).
				    aTorqueValue := (UniformDistribution from: -1 to: 1) random].


unit needleCompMethod: 'proportional'.
10 timesRepeat: [|oldDeviation|
				    oldDeviation := unit criticalDeviation.
				    unit newNeedlePosition: aTorqueValue.
                            self assert:(oldDeviation = unit criticalDeviation).
				    aTorqueValue := (UniformDistribution from: -1 to: 1) random].

unit needleCompMethod: 'random'.
10 timesRepeat: [|oldDeviation|
				    oldDeviation := unit criticalDeviation.
				    unit newNeedlePosition: aTorqueValue.
                            self assert:(oldDeviation = unit criticalDeviation).
				    aTorqueValue := (UniformDistribution from: -1 to: 1) random].

unit needleCompMethod: ''.
10 timesRepeat: [|oldDeviation|
				    oldDeviation := unit criticalDeviation.
				    unit newNeedlePosition: aTorqueValue.
                            self assert:(oldDeviation = unit criticalDeviation).
				    aTorqueValue := (UniformDistribution from: -1 to: 1) random].</body>

<body package="Homeostat" selector="testSavingPrivateMethods">testSavingPrivateMethods

| newUnit newUnit2 dict |
 dict := Dictionary new.
dict at: 'low' put: -1; at: 'high' put: 1 .

newUnit := HomeoUnit name: 'pippo'
					 	viscosity: 0.5
			 			maxDeviation: 20
						criticalDeviation: 0
					 	noise: 0.1
					 	potentiometer: 0.2
					 	switch: -1
						outputRange: dict
						inputConnections: OrderedCollection new
					 	uniselector: (HomeoUniselectorAshby new)
					 	uniselectorTimeInterval: 10
					 	uniselectorActive: true
					 	needleCompMethod: 'linear' 
						active: true.


newUnit2 := HomeoUnit name: 'pippo'
					 	viscosity: 0.5
			 			maxDeviation: 20
						criticalDeviation: 0
					 	noise: 0.1
					 	potentiometer: 0.2
					 	switch: -1 
						outputRange: dict
						inputConnections: OrderedCollection new
					 	uniselector: (HomeoUniselectorAshby new)
					 	uniselectorTimeInterval: 10
					 	uniselectorActive: true
					 	needleCompMethod: 'linear' 
						active: true.

self assert: (newUnit sameAs: newUnit2).</body>

<body package="Homeostat" selector="testSelfUpdate">testSelfUpdate
	

	| oldUniselectorTime |

unit time.
oldUniselectorTime := unit uniselectorTime.

unit selfUpdate.
self assert: (unit uniselectorTime = (oldUniselectorTime +1)).</body>

<body package="Homeostat" selector="testViscosity">testViscosity
	"viscosity reduces the effect of  the outside force on the unit's needle movement."

"When viscosity = 0, the force affecting the unit  is unchanged"

self assert: false.


"When viscosity &gt; 0, the force  changes according to drag. Real tests of drag laws performed in drag unit tests. Here we just check that it is lower than when viscosity +0"

self assert: false</body>

DONE <!--<body package="Homeostat" selector="testComputeNextOutputWithDefaults">testComputeNextOutputWithDefaults

"checks:
1. that it computes a new value and puts it in the correct iVar
2. that the value is within the unit's limits

tests are performed  with default values "

| highRange lowRange  oldOutput  |

highRange := (unit outputRange) at:'high'.
lowRange := (unit outputRange) at: 'low'.


oldOutput := unit currentOutput.
unit selfUpdate.

"1 " self assert: ((oldOutput = (unit currentOutput)) not).
"2" self assert: ( unit currentOutput between: lowRange and:	highRange).</body>-->

DONE <!--<body package="Homeostat" selector="testComputeTorque">testComputeTorque
	| unit2 unit3 unit4 |
	unit2 := HomeoUnit new.
	unit3 := HomeoUnit new.
	unit4 := HomeoUnit new.
	
"1. test torque when unit is not connected to anything. Should be 0"
unit removeConnectionFromUnit: unit.

self assert: (unit inputConnections size = 0).
self assert: (unit computeTorque = 0).

"2. add a self connection at 1 and another connection at 1. torque should be 2"

unit addConnection: unit withWeight: 1 andPolarity: 1 andNoise: 0 andState: 'manual'.
unit currentOutput: 1.
unit2 currentOutput: 1.
unit addConnection: unit2 withWeight: 1 andPolarity: 1 andNoise: 0 andState: 'manual'.
self assert: (unit inputConnections size = 2).
self assert: (unit computeTorque = 2).

"3. Add a pair of connections at -1. check again"

unit addConnection: unit3 withWeight: 1 andPolarity: -1 andNoise: 0 andState: 'manual'.
unit3 currentOutput: 1.
unit4 currentOutput: 1.
unit addConnection: unit4 withWeight: 1 andPolarity: -1 andNoise: 0 andState: 'manual'.
self assert: (unit inputConnections size = 4).
self assert: (unit computeTorque = 0).</body>-->

DONE <!--<body package="Homeostat" selector="testComputeTorqueWithinLimits">testComputeTorqueWithinLimits

| unit2 unit3 unit4 |

unit2 := HomeoUnit new.
unit3 := HomeoUnit new.
unit4 := HomeoUnit new.

unit addConnectionWithRandomValues: unit2.
unit addConnectionWithRandomValues: unit3.
unit addConnectionWithRandomValues: unit4.

self assert: ((unit computeTorque) between: -3 and: 3).</body>-->

DONE <!--<body package="Homeostat" selector="testOutputAndDeviationInRange">testOutputAndDeviationInRange
	"repeated test with fully connected units on outputs values and critical deviation values within their ranges"

	| highOut lowOut highDev lowDev unit2 unit3 unit4 |

	

	highOut := (unit outputRange) at: 'high'.
	lowOut   := (unit outputRange) at: 'low'.
	highDev := unit maxDeviation.
	lowDev := highDev negated.

	unit2 := HomeoUnit new.
	unit2 setRandomValues.
	unit3 := HomeoUnit new.
	unit3 setRandomValues.
	unit4 := HomeoUnit new.
	unit4 setRandomValues.

	unit addConnectionWithRandomValues: unit2.
	unit addConnectionWithRandomValues: unit3.
	unit addConnectionWithRandomValues: unit4.

	100000 timesRepeat: [
		unit selfUpdate.
"		(unit currentOutput between: lowOut and: highOut) not ifTrue: [self halt].
"		self assert: (unit currentOutput between: lowOut and: highOut).
		self assert: (unit criticalDeviation between: lowDev and: highDev)]</body>-->

DONE <!--<body package="Homeostat" selector="testOutputAndDeviationInRange">testOutputAndDeviationInRange
	"repeated test with fully connected units on outputs values and critical deviation values within their ranges"

	| highOut lowOut highDev lowDev unit2 unit3 unit4 |

	

	highOut := (unit outputRange) at: 'high'.
	lowOut   := (unit outputRange) at: 'low'.
	highDev := unit maxDeviation.
	lowDev := highDev negated.

	unit2 := HomeoUnit new.
	unit2 setRandomValues.
	unit3 := HomeoUnit new.
	unit3 setRandomValues.
	unit4 := HomeoUnit new.
	unit4 setRandomValues.

	unit addConnectionWithRandomValues: unit2.
	unit addConnectionWithRandomValues: unit3.
	unit addConnectionWithRandomValues: unit4.

	100000 timesRepeat: [
		unit selfUpdate.
"		(unit currentOutput between: lowOut and: highOut) not ifTrue: [self halt].
"		self assert: (unit currentOutput between: lowOut and: highOut).
		self assert: (unit criticalDeviation between: lowDev and: highDev)]</body>-->

DONE <!--<body package="Homeostat" selector="testOutputRange">testOutputRange
	"comment stating purpose of message"

	| highRange lowRange |
	highRange := unit outputRange at: 'high'.
	lowRange := unit outputRange at: 'low'.
	100 timesRepeat: 
			[unit selfUpdate.
			  self assert: (unit currentOutput < highRange 
			    and: [unit currentOutput > lowRange])]</body>-->

DONE <!--<body package="Homeostat" selector="testPotentiometer">testPotentiometer
	
	| selfConnWeight poten |
	
	poten := unit potentiometer.
	selfConnWeight := (unit inputConnections at: 1) weight.
	self assert: poten = selfConnWeight.
	
	unit potentiometer: 1.
	self assert: poten = selfConnWeight.
	
	10 timesRepeat: 
			[unit potentiometer: Random new next.
			self assert: poten = selfConnWeight]</body>-->
			
DONE <!--<body package="Homeostat" selector="testComputeNextDeviationRandom">testComputeNextDeviationRandom


| oldDeviation |
unit needleCompMethod: ''.  "empty string should trigger the random method"

"check that the critical deviation values are always different"

1000 timesRepeat: [
		oldDeviation := unit criticalDeviation.
		unit selfUpdate.
		self assert: ((unit criticalDeviation = oldDeviation) not)]</body>-->

DONE <!--<body package="Homeostat" selector="testFirstLevelParamSameAs">testFirstLevelParamSameAs

| anotherUnit param newRandomName ws|


ws := WriteStream on: String new.
"build a random name, because units accept new names only if they have never used before (or they have not been garbage collected yet"
15 timesRepeat: [ws nextPut: ((UniformDistribution from: 65 to: (65+ 26)) random truncated asCharacter)].
newRandomName := ws contents.


unit setRandomValues.
anotherUnit := unit copy.

self assert: (unit sameFirstLevelParamsAs: anotherUnit).

param := unit name.

unit name: newRandomName.
self deny:  (unit sameFirstLevelParamsAs: anotherUnit).
unit name: param.

self assert: (unit sameFirstLevelParamsAs: anotherUnit).

anotherUnit potentiometer: (anotherUnit potentiometer + 0.1).

self deny: (unit sameFirstLevelParamsAs: anotherUnit).</body>
-->

DONE <!--<body package="Homeostat" selector="testNewNeedlePosition">testNewNeedlePosition
	"test correct computation of needle movement. Ignore noise, as it is computed within the unit itself"

	| newNeedlePosition correctValue maxInput minInput torqueValue |
	unit needleUnit mass: 1.
	maxInput := 3.	"typical of the 4 units Homeostat"
	minInput := maxInput negated.
	100 timesRepeat: 
			[unit criticalDeviation: 1.
			unit needleCompMethod: 'linear'.
			unit noise: 0.
			unit viscosity: 1.
			torqueValue := Random new nextBetween: minInput and: maxInput.
			newNeedlePosition := unit newNeedlePosition: torqueValue.
			correctValue := unit criticalDeviation + (torqueValue * unit viscosity) 
						- unit noise.
"			Transcript
				show: newNeedlePosition printString;
				show: '   ' , 'critical Dev. ' , unit criticalDeviation printString;
				cr."
"			Transcript show: unit printDescription."
			self assert: newNeedlePosition = correctValue]</body>-->
			
DONE<!--<body package="Homeostat" selector="testNeedleWithinLimit">testNeedleWithinLimit
	"testing the clipping function operating on a unit's critical deviation's value"

	| highVal lowVal aValue |
	
	highVal := unit maxDeviation.
	lowVal := unit maxDeviation negated.

	aValue := highVal * 1.1.
	self deny: (unit isNeedleWithinLimits: aValue).

	aValue := highVal *0.9.
	self assert: (unit isNeedleWithinLimits: aValue).

	aValue := lowVal *1.1.
	self deny: (unit isNeedleWithinLimits: aValue).

	aValue := lowVal *0.9.
	self assert: (unit isNeedleWithinLimits: aValue).</body>-->

DONE <!--<body package="Homeostat" selector="testSameAs">testSameAs
 | unit2 unit3 unit4 param |


unit setRandomValues.
unit2 := HomeoUnit new setRandomValues.
unit3 := HomeoUnit new setRandomValues.
unit4 := HomeoUnit new setRandomValues.
HomeoUnit new setRandomValues.

unit addConnectionWithRandomValues: unit2.
unit addConnectionWithRandomValues: unit3.

unit4 := unit copy.

self assert: (unit sameAs: unit4).

param := unit4 name. 
unit4 name: param, 'pippo'.
self deny: (unit sameAs: unit4).
unit   := HomeoUnit new.
unit4 := HomeoUnit new.

self deny: (unit sameAs: unit4).</body>-->

DONE<!--<body package="Homeostat" selector="testAddConnection">testAddConnection

 | newUnit  weight polarity |

newUnit := HomeoUnit new.
weight := 0.5.
polarity := 1.

unit addConnection: newUnit withWeight: weight andPolarity: polarity andState: 'manual'.

self assert: (unit inputConnections notNil).
self assert: (unit inputConnections last incomingUnit = newUnit).
self assert: (unit inputConnections last weight = weight).
self assert: (unit inputConnections last switch = polarity).
self assert: (unit inputConnections last state = 'manual').</body>-->

DONE<!--<body package="Homeostat" selector="testApplicationInternalNoise">testApplicationInternalNoise
	"Check that in presence of noise the unit's critical deviation is changed and not changed when noise = 0. A more comprehensive test should check that the noise value applied is uniformly distributing, proportional and distorting."


unit setRandomValues.
unit noise: 0.1.

10 timesRepeat: [|oldDeviation|
				    oldDeviation := unit criticalDeviation.
				    unit updateDeviationWithNoise.
                            self deny: (oldDeviation = unit criticalDeviation)].


unit noise: 0.
10 timesRepeat: [|oldDeviation|
				    oldDeviation := unit criticalDeviation.
                            self assert:(oldDeviation = unit criticalDeviation)].</body>-->

DONE<!--<body package="Homeostat" selector="testBossOutHomeoUnit">testBossOutHomeoUnit
	"comment stating purpose of message"



	| boss newUnit  filename |
	filename := 'pippo.unit' asFilename.
	
	unit  bossOutOn: filename. 

	boss :=  BinaryObjectStorage onOldNoScan: filename readStream.
	newUnit:= boss next.
	boss close.
	self assert: (newUnit class = HomeoUnit).

	self assert: (unit sameAs: newUnit).</body>-->

DONE<!--<body package="Homeostat" selector="testClassDefaults">testClassDefaults
	"test that  the class has its appropriate dictionary of Defaults and that the values are not empty"
| defParam range|


defParam := HomeoUnit defaultParameters.

self assert: (defParam includesKey: 'viscosity').
self assert: (defParam includesKey: 'maxDeviation').
self assert: (defParam includesKey: 'outputRange').
self assert: (defParam includesKey: 'noise').
self assert: (defParam includesKey: 'potentiometer').
self assert: (defParam includesKey: 'time').
self assert: (defParam includesKey: 'uniselectorTimeInterval').
self assert: (defParam includesKey: 'uniselectorTime').
self assert: (defParam includesKey: 'needleCompMethod').

self assert: ((defParam at: 'viscosity') notNil).
self assert: ((defParam at: 'maxDeviation') notNil).
self assert: ((defParam at: 'noise') notNil).
self assert: ((defParam at: 'potentiometer' ) notNil).
self assert: ((defParam at: 'time') notNil).
self assert: ((defParam at: 'uniselectorTimeInterval') notNil).
self assert: ((defParam at: 'uniselectorTime') notNil).
self assert: ((defParam at:  'needleCompMethod')  notNil).

range := defParam at: 'outputRange'.

self assert: (range includesKey: 'high').
self assert: ((range at: 'high') notNil).

self assert: (range includesKey: 'low').
self assert: ((range at: 'low') notNil).</body>-->

DONE <!--<body package="Homeostat" selector="testInitializationDefaults">testInitializationDefaults
	"test that the class default values are properly inserted in the instance's variable"
	| defViscosity defMaxDeviation defOutputRange defNoise defPotentiometer defTime defUniselectorTime defUniselectorTimeInterval |
	
	defViscosity := HomeoUnit defaultParameters at: 'viscosity'.
	self assert: (unit viscosity) == defViscosity.
	
	defMaxDeviation := HomeoUnit defaultParameters at: 'maxDeviation'.
	self assert: (unit maxDeviation) = defMaxDeviation.

	defNoise := HomeoUnit defaultParameters at: 'noise'.
	self assert: (unit noise) = defNoise.

	defPotentiometer := HomeoUnit defaultParameters at: 'potentiometer'.
	self assert: (unit potentiometer) = defPotentiometer.

	defOutputRange := HomeoUnit defaultParameters at: 'outputRange'.
	self assert: ((unit outputRange at: 'high' ) = (defOutputRange at: 'high')).

	defOutputRange := HomeoUnit defaultParameters at: 'outputRange'.
	self assert: ((unit outputRange at: 'low' ) = (defOutputRange at: 'low')).

	defTime := HomeoUnit defaultParameters at: 'time'.
	self assert: (unit time = defTime).

	defUniselectorTime := HomeoUnit defaultParameters at: 'uniselectorTime'.
	self assert: (unit uniselectorTime = defUniselectorTime).

	defUniselectorTimeInterval := HomeoUnit defaultParameters at: 'uniselectorTimeInterval'.
	self assert: (unit uniselectorTimeInterval = defUniselectorTimeInterval).
  </body>-->

DONE<!--<body package="Homeostat" selector="testIsConnectedTo">testIsConnectedTo


 | newUnit  weight polarity |

newUnit := HomeoUnit new.
weight := 0.5.
polarity := 1.

self deny: (unit isConnectedTo: newUnit).
unit addConnection: newUnit withWeight: weight andPolarity: polarity andState: 'manual'.
self assert: (unit isConnectedTo: newUnit).</body>-->

DONE <!--<body package="Homeostat" selector="testIstReadyToGo">testIstReadyToGo

"this really tests this method against the conditions set in the initialization procedure and assumes that the latter is correct"

self assert: (unit isReadyToGo)</body>-->

DONE<!--<body package="Homeostat" selector="testRandomizeValues">testRandomizeValues

| oldOutput |
unit setRandomValues.
oldOutput := unit currentOutput.
unit setRandomValues.
self deny: (oldOutput = unit currentOutput).</body>-->

DONE<!--<body package="Homeostat" selector="testRemoveConnection">testRemoveConnection

 | newUnit  weight polarity |

newUnit := HomeoUnit new.
weight := 0.5.
polarity := 1.

unit addConnection: newUnit withWeight: weight andPolarity: polarity andState: 'manual'.

unit removeConnectionFromUnit: newUnit.
self deny: (unit isConnectedTo: newUnit).</body>-->

DONE<!--<body package="Homeostat" selector="testUnitNameExist">testUnitNameExist
	"comment stating purpose of message"


self assert: ((unit name) notNil).
	</body>-->

DONE<!--<body package="Homeostat" selector="testUnitNameUnique">testUnitNameUnique
	"comment stating purpose of message"

| secondUnit  |

secondUnit := HomeoUnit new.

self deny: ((unit name) = (secondUnit name)).
</body>-->

DONE [and changed name to testComputeNextDeviationRunoffAndStabilityLinear<!--<body package="Homeostat" selector="testComputeNextDeviationLinear">testComputeNextDeviationLinear

| tempDev errorTolerance|

errorTolerance := 0.00000001.               "Need to use a tolerance threshold for comparison, due to floating point math"


"the polarity of the output controls the change in the criticalDeviation through simple summation.
We  check that it runs up toward positive infinity (1) and negative infinity (2) (with linear increases)"
" We set noises to 0, viscosity to 1, potentiometer to 1, etc, to check that the basic mechanism works."

unit needleCompMethod: 'linear'.
unit needleUnit mass: 1.                 "the force acting on a Aristotelian unit is always inversely proportional to the mass. set it to 1 to exclude complications from this test."

"1. with self connection to 1, noise at 0, viscosity to 1 and the unit not connected to other units, the deviation increases by the ratio criticalDeviation/maxDeviation every cycle if it starts positive, because output is ALWAYS proportional to the unit's range. Eventually it will go up to infinity, i..e to maxDeviation." 

unit potentiometer: 1.     "this sets the value of the self-connection"
(unit inputConnections at: 1) switch: 1. "self-connection is positive"
unit noise:	0.							"No noise present to simplify calculations"
unit viscosity: 1.
unit criticalDeviation: 1.
unit currentOutput: 1.
unit selfUpdate.
self assert: (unit criticalDeviation = 2).
unit selfUpdate.
self assert: (unit criticalDeviation = (2 + (2/ unit maxDeviation))).
tempDev := unit criticalDeviation.
10 timesRepeat:	[unit selfUpdate. tempDev := tempDev + (tempDev/unit maxDeviation) ].
self assert: (((unit criticalDeviation)  - tempDev) abs &lt;errorTolerance).     
100 timesRepeat: [unit selfUpdate].
self assert: (unit criticalDeviation = unit maxDeviation).



"2. with starting point negative we will run up to negative infinity, because the output will become negative after the first iteration."
unit criticalDeviation: -3.
unit currentOutput: 1.
unit selfUpdate.
self assert: (unit criticalDeviation = -2).
tempDev := unit criticalDeviation.
10 timesRepeat:	[unit selfUpdate. tempDev := tempDev + (tempDev/unit maxDeviation) ].
self assert: (((unit criticalDeviation)  - tempDev) abs &lt;errorTolerance).     
100 timesRepeat: [unit selfUpdate].
self assert: (unit criticalDeviation = unit maxDeviation negated).



"3. with polarity reversed  the unit will tend to stabilize itself around 0, because the output will always counteract the unit's deviation. "
(unit inputConnections at: 1) switch: -1. "self-connection's switch is negative: unit's output is reinputted with reverse polarity"


unit criticalDeviation: -2.
unit currentOutput: -1.
unit selfUpdate.
self assert: (unit criticalDeviation = -1).
200 timesRepeat: [unit selfUpdate].
self assert: (unit criticalDeviation &lt; errorTolerance abs).

"4." 
unit criticalDeviation: 2.
unit currentOutput: -1.
unit selfUpdate.
self assert: (unit criticalDeviation = 3).
200 timesRepeat: [unit selfUpdate].
self assert: (unit criticalDeviation &lt; errorTolerance abs).</body>-->

DONE <!--<body package="Homeostat" selector="testComputeNextDeviationLinearConnected">testComputeNextDeviationLinearConnected
	"A standard HomeoUnit increases its value (critiDeviation) at each computational step by the basic formula:
	 critDeviation (n+1) = criticalDev(n) + (sum(input * weight)/ unit mass)

	The basic formula is complicated by taking into consideration:
	1. noise, which affects both the stability of a unit's critDeviation (as flickering), and the connections to other units (as distortions)
	2. viscosity of the medium
	3. clipping, which limits the maximum/minimum values of critDeviation
	4. The mass of the unit 

	In this series of tests  we check the basic formula only. Viscosity and clipping have their own tests, see the HomeoNoise Class for noise testing. We set the mass to 1 simplify the computation"

	"This test  checks a self-connected unit connected to another unit."


|deviation  errorTolerance testRuns anotherUnit|

errorTolerance := 10 raisedTo:-14.  "Cannot get a result better than 10^-14. Consistently fails on smaller values"
testRuns := 100.
anotherUnit := HomeoUnit new.


unit needleCompMethod: 'linear';
      noise: 0.                              "Eliminate flicker noise to simplify test"
unit needleUnit mass: 1.
	
unit addConnectionWithRandomValues: anotherUnit.
unit inputConnections do: [:conn | conn noise: 0].   "the self-connection and the connection to anotherUnit are noise-free"

1 to: testRuns do:
	[ :i | | exceeded |
	unit criticalDeviation: (UniformDistribution from: -10 to: 10) random.
	unit computeOutput.
	unit potentiometer: (UniformDistribution from: 0 to: 1) random.
	unit switch: (UniformDistribution from: -1 to: 1) random sign.
	deviation := unit criticalDeviation.	 
	1 to: 10 do: 
		[ :k | |input|
		input := (unit inputConnections at: 2) output.
		deviation  := deviation  + (unit currentOutput * unit potentiometer * unit switch) + input.
		exceeded := deviation abs &gt; unit maxDeviation. 
		unit selfUpdate.
	      exceeded 
			ifTrue: [  self assert: true.]                                                    "If criticalDeviation value went at anytime  beyond clipping limits don't check. This test is carried out in other unit tests"
			ifFalse:[ self assert: ((deviation - unit criticalDeviation) abs &lt; errorTolerance)]]]</body>-->

DONE <!--<body package="Homeostat" selector="testComputeNextDeviationLinearConnectedTo10Units">testComputeNextDeviationLinearConnectedTo10Units
	"A standard HomeoUnit increases its value (critiDeviation) at each computational step by the basic formula:
	 critDeviation (n+1) = criticalDev(n) + (sum(input * weight)/ unit mass)

	The basic formula is complicated by taking into consideration:
	1. noise, which affects both the stability of a unit's critDeviation (as flickering), and the connections to other units (as distortions)
	2. viscosity of the medium
	3. clipping, which limits the maximum/minimum values of critDeviation
	4. The mass of the unit 

	In this series of tests  we check the basic formula only. Viscosity and clipping have their own tests, see the HomeoNoise Class for noise testing. We set the mass to 1 simplify the computation"

	"This test  checks a self-connected unit connected to another unit."


|deviation  errorTolerance testRuns|

errorTolerance := 10 raisedTo: -14.  "Cannot get a result better than 10^-14. Consistently fails on smaller values"
testRuns := 1.

10 timesRepeat: [ | aUnit | aUnit := HomeoUnit new.
							unit addConnectionWithRandomValues: aUnit]. 

unit needleCompMethod: 'linear';
      noise: 0.                              "Eliminate flicker noise to simplify test"
unit needleUnit mass: 1.
	

unit inputConnections do: [:conn | conn noise: 0].   "the self-connection and the connections to all other units  are noise-free"

1 to: testRuns do:
	[ :i | | exceeded |
	unit criticalDeviation: (UniformDistribution from: unit maxDeviation negated to: unit maxDeviation) random.
	unit computeOutput.
	unit potentiometer: (UniformDistribution from: 0 to: 1) random.
	unit switch: (UniformDistribution from: -1 to: 1) random sign.
	deviation := unit criticalDeviation.	 
	1 to: 100 do: 
		[ :k | |input|
		input := 0.
		2 to: (unit inputConnections size) do: [ :index | input := input + (unit inputConnections	at: index) output ].  "only sum the input from external units"
		deviation  := deviation  + (unit currentOutput * unit potentiometer * unit switch) + input.
		exceeded := deviation abs &gt; unit maxDeviation. 
		unit selfUpdate.
      	exceeded ifTrue: [  self assert: true.
							deviation := unit criticalDeviation]                                                    "If criticalDeviation value went at anytime  beyond clipping limits don't check. (This test is carried out in other unit tests) Reset computing deviation to avoid carrying the error over to next cycles"
			ifFalse:[self assert:  ((deviation - unit criticalDeviation) abs &lt; errorTolerance)]]]</body>-->

DONE <!--<body package="Homeostat" selector="testComputeNextDeviationLinearSelfconnected">testComputeNextDeviationLinearSelfconnected
	"A standard HomeoUnit increases its value (critiDeviation) at each computational step by the basic formula:
	 critDeviation (n+1) = criticalDev(n) + (sum(input * weight)/ unit mass)

	The basic formula is complicated by taking into consideration:
	1. noise, which affects both the stability of a unit's critDeviation (as flickering), and the connections to other units (as distortions)
	2. viscosity of the medium
	3. clipping, which limits the maximum/minimum values of critDeviation
	4. The mass of the unit 

	In this series of tests  we check the basic formula only. Viscosity and clipping have their own tests, see the HomeoNoise Class for noise testing. We set the mass to 1 simplify the computation"

	"This test  checks  a single self-connected unit."

	| deviation errorTolerance testRuns |
	errorTolerance := 0.
	testRuns := 1000.
	unit
		needleCompMethod: 'linear';
		maxDeviation: 100;
		noise: 0.	"initially set the unit uncinnected to correctly initialize value of output."
	unit needleUnit mass: 1.
	(unit inputConnections at: 1) noise: 0.	"the self-connection is noise-free"
	1 to: testRuns
		do: 
			[:i | 
			| exceeded |
			unit criticalDeviation: (UniformDistribution from: unit maxDeviation negated  to: unit maxDeviation) random.
			unit computeOutput.
			unit criticalDeviation.
			unit potentiometer: (UniformDistribution from: 0 to: 1) random.
			unit switch: (UniformDistribution from: -1 to: 1) random sign.
			deviation := unit criticalDeviation.
			1 to: 10 do: 
					[:k | 
					deviation := deviation + (unit currentOutput * unit potentiometer * unit switch).
					exceeded := deviation abs &gt; unit maxDeviation.
					unit selfUpdate.].
			exceeded 
				ifTrue: 
					[self assert: true.]
				ifFalse: 
					[self assert: (deviation = unit criticalDeviation)]].</body>-->

DONE <!--<body package="Homeostat" selector="testComputeNextDeviationLinearUnconnected">testComputeNextDeviationLinearUnconnected
	"A standard HomeoUnit increases its value (critiDeviation) at each computational step by the basic formula:
	 critDeviation (n+1) = criticalDev(n) + (sum(input * weight)/ unit mass)

	The basic formula is complicated by taking into consideration:
	1. noise, which affects both the stability of a unit's critDeviation (as flickering), and the connections to other units (as distortions)
	2. viscosity of the medium
	3. clipping, which limits the maximum/minimum values of critDeviation
	4. The unit's mass

	In this series of tests  we check the basic formula only. Viscosity and clipping have their own tests, see the HomeoNois Class for noise testing."

	"This test  checks  a single unconnected unit. The value will always remain at its initial value"


|tempDev testRuns|

testRuns := 1000.

unit needleCompMethod: 'linear'.

unit potentiometer: 0.  "put the weight of the self-connection to zero."

testRuns timesRepeat:
	[unit criticalDeviation: (UniformDistribution from: unit maxDeviation negated to: unit maxDeviation) random.
	 unit needleUnit mass: (UniformDistribution from: 0.0001 to: 10000) random.
	 unit viscosity: (UniformDistribution from: 0 to: 1) random.
	tempDev := unit criticalDeviation.	 
	10 timesRepeat: [unit selfUpdate].
	self assert: (tempDev = unit criticalDeviation)].</body>-->


</methods>

<methods>
<class-id>HomeoUnitTest</class-id> <category>initialize-release</category>

<body package="Homeostat" selector="initialize">initialize
	"Initialize a newly created instance. This method must answer the receiver."

	" *** Replace this comment with the appropriate initialization code *** "
	^self</body>

<body package="Homeostat" selector="setUp">setUp
	"Initialize the HomeoUnit class and sets up a default HomeoUnit for testing"

"initialize the HomeoUnit class to clear all old names (held in the Names shared variable)"
HomeoUnit initialize.

unit := HomeoUnit new.</body>
</methods>

</st-source>

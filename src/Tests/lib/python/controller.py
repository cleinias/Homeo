# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_controller', [dirname(__file__)])
        except ImportError:
            import _controller
            return _controller
        if fp is not None:
            try:
                _mod = imp.load_module('_controller', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _controller = swig_import_helper()
    del swig_import_helper
else:
    import _controller
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Device(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Device, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Device, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _controller.delete_Device
    __del__ = lambda self : None;
    def getName(self): return _controller.Device_getName(self)
    def getType(self): return _controller.Device_getType(self)
    __swig_getmethods__["exists"] = lambda x: _controller.Device_exists
    if _newclass:exists = staticmethod(_controller.Device_exists)
Device_swigregister = _controller.Device_swigregister
Device_swigregister(Device)

def Device_exists(*args):
  return _controller.Device_exists(*args)
Device_exists = _controller.Device_exists

class Accelerometer(Device):
    __swig_setmethods__ = {}
    for _s in [Device]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Accelerometer, name, value)
    __swig_getmethods__ = {}
    for _s in [Device]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Accelerometer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _controller.new_Accelerometer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _controller.delete_Accelerometer
    __del__ = lambda self : None;
    def enable(self, *args): return _controller.Accelerometer_enable(self, *args)
    def disable(self): return _controller.Accelerometer_disable(self)
    def getSamplingPeriod(self): return _controller.Accelerometer_getSamplingPeriod(self)
    def getValues(self): return _controller.Accelerometer_getValues(self)
Accelerometer_swigregister = _controller.Accelerometer_swigregister
Accelerometer_swigregister(Accelerometer)

class Camera(Device):
    __swig_setmethods__ = {}
    for _s in [Device]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Camera, name, value)
    __swig_getmethods__ = {}
    for _s in [Device]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Camera, name)
    __repr__ = _swig_repr
    COLOR = _controller.Camera_COLOR
    RANGE_FINDER = _controller.Camera_RANGE_FINDER
    BOTH = _controller.Camera_BOTH
    def __init__(self, *args): 
        this = _controller.new_Camera(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _controller.delete_Camera
    __del__ = lambda self : None;
    def enable(self, *args): return _controller.Camera_enable(self, *args)
    def disable(self): return _controller.Camera_disable(self)
    def getSamplingPeriod(self): return _controller.Camera_getSamplingPeriod(self)
    def getImage(self): return _controller.Camera_getImage(self)
    def getRangeImage(self): return _controller.Camera_getRangeImage(self)
    def getWidth(self): return _controller.Camera_getWidth(self)
    def getHeight(self): return _controller.Camera_getHeight(self)
    def getFov(self): return _controller.Camera_getFov(self)
    def setFov(self, *args): return _controller.Camera_setFov(self, *args)
    def getType(self): return _controller.Camera_getType(self)
    def getNear(self): return _controller.Camera_getNear(self)
    def getMaxRange(self): return _controller.Camera_getMaxRange(self)
    def saveImage(self, *args): return _controller.Camera_saveImage(self, *args)
    def getImageArray(self): return _controller.Camera_getImageArray(self)
    def getRangeImageArray(self): return _controller.Camera_getRangeImageArray(self)
    __swig_getmethods__["rangeImageGetValue"] = lambda x: _controller.Camera_rangeImageGetValue
    if _newclass:rangeImageGetValue = staticmethod(_controller.Camera_rangeImageGetValue)
    __swig_getmethods__["rangeImageGetDepth"] = lambda x: _controller.Camera_rangeImageGetDepth
    if _newclass:rangeImageGetDepth = staticmethod(_controller.Camera_rangeImageGetDepth)
    __swig_getmethods__["imageGetRed"] = lambda x: _controller.Camera_imageGetRed
    if _newclass:imageGetRed = staticmethod(_controller.Camera_imageGetRed)
    __swig_getmethods__["imageGetGreen"] = lambda x: _controller.Camera_imageGetGreen
    if _newclass:imageGetGreen = staticmethod(_controller.Camera_imageGetGreen)
    __swig_getmethods__["imageGetBlue"] = lambda x: _controller.Camera_imageGetBlue
    if _newclass:imageGetBlue = staticmethod(_controller.Camera_imageGetBlue)
    __swig_getmethods__["imageGetGrey"] = lambda x: _controller.Camera_imageGetGrey
    if _newclass:imageGetGrey = staticmethod(_controller.Camera_imageGetGrey)
Camera_swigregister = _controller.Camera_swigregister
Camera_swigregister(Camera)

def Camera_rangeImageGetValue(*args):
  return _controller.Camera_rangeImageGetValue(*args)
Camera_rangeImageGetValue = _controller.Camera_rangeImageGetValue

def Camera_rangeImageGetDepth(*args):
  return _controller.Camera_rangeImageGetDepth(*args)
Camera_rangeImageGetDepth = _controller.Camera_rangeImageGetDepth

def Camera_imageGetRed(*args):
  return _controller.Camera_imageGetRed(*args)
Camera_imageGetRed = _controller.Camera_imageGetRed

def Camera_imageGetGreen(*args):
  return _controller.Camera_imageGetGreen(*args)
Camera_imageGetGreen = _controller.Camera_imageGetGreen

def Camera_imageGetBlue(*args):
  return _controller.Camera_imageGetBlue(*args)
Camera_imageGetBlue = _controller.Camera_imageGetBlue

def Camera_imageGetGrey(*args):
  return _controller.Camera_imageGetGrey(*args)
Camera_imageGetGrey = _controller.Camera_imageGetGrey

class Compass(Device):
    __swig_setmethods__ = {}
    for _s in [Device]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Compass, name, value)
    __swig_getmethods__ = {}
    for _s in [Device]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Compass, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _controller.new_Compass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _controller.delete_Compass
    __del__ = lambda self : None;
    def enable(self, *args): return _controller.Compass_enable(self, *args)
    def disable(self): return _controller.Compass_disable(self)
    def getSamplingPeriod(self): return _controller.Compass_getSamplingPeriod(self)
    def getValues(self): return _controller.Compass_getValues(self)
Compass_swigregister = _controller.Compass_swigregister
Compass_swigregister(Compass)

class Connector(Device):
    __swig_setmethods__ = {}
    for _s in [Device]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Connector, name, value)
    __swig_getmethods__ = {}
    for _s in [Device]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Connector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _controller.new_Connector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _controller.delete_Connector
    __del__ = lambda self : None;
    def enablePresence(self, *args): return _controller.Connector_enablePresence(self, *args)
    def disablePresence(self): return _controller.Connector_disablePresence(self)
    def getPresence(self): return _controller.Connector_getPresence(self)
    def lock(self): return _controller.Connector_lock(self)
    def unlock(self): return _controller.Connector_unlock(self)
Connector_swigregister = _controller.Connector_swigregister
Connector_swigregister(Connector)

class ImageRef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _controller.new_ImageRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _controller.delete_ImageRef
    __del__ = lambda self : None;
    def getImageRef(self): return _controller.ImageRef_getImageRef(self)
ImageRef_swigregister = _controller.ImageRef_swigregister
ImageRef_swigregister(ImageRef)

class Display(Device):
    __swig_setmethods__ = {}
    for _s in [Device]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Display, name, value)
    __swig_getmethods__ = {}
    for _s in [Device]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Display, name)
    __repr__ = _swig_repr
    RGB = _controller.Display_RGB
    RGBA = _controller.Display_RGBA
    ARGB = _controller.Display_ARGB
    BGRA = _controller.Display_BGRA
    def __init__(self, *args): 
        this = _controller.new_Display(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _controller.delete_Display
    __del__ = lambda self : None;
    def getWidth(self): return _controller.Display_getWidth(self)
    def getHeight(self): return _controller.Display_getHeight(self)
    def setColor(self, *args): return _controller.Display_setColor(self, *args)
    def setAlpha(self, *args): return _controller.Display_setAlpha(self, *args)
    def setOpacity(self, *args): return _controller.Display_setOpacity(self, *args)
    def drawPixel(self, *args): return _controller.Display_drawPixel(self, *args)
    def drawLine(self, *args): return _controller.Display_drawLine(self, *args)
    def drawRectangle(self, *args): return _controller.Display_drawRectangle(self, *args)
    def drawOval(self, *args): return _controller.Display_drawOval(self, *args)
    def internalDrawPolygon(self, *args): return _controller.Display_internalDrawPolygon(self, *args)
    def drawText(self, *args): return _controller.Display_drawText(self, *args)
    def fillRectangle(self, *args): return _controller.Display_fillRectangle(self, *args)
    def fillOval(self, *args): return _controller.Display_fillOval(self, *args)
    def internalFillPolygon(self, *args): return _controller.Display_internalFillPolygon(self, *args)
    def internalImageNew(self, *args): return _controller.Display_internalImageNew(self, *args)
    def imageCopy(self, *args): return _controller.Display_imageCopy(self, *args)
    def imagePaste(self, *args): return _controller.Display_imagePaste(self, *args)
    def imageLoad(self, *args): return _controller.Display_imageLoad(self, *args)
    def imageSave(self, *args): return _controller.Display_imageSave(self, *args)
    def imageDelete(self, *args): return _controller.Display_imageDelete(self, *args)
    def imageNew(self,data,format,width=None,height=None):
      if type(data).__name__=='list':
        return self.internalImageNew(len(data),len(data[0]),data,format)
      elif(width is None or height is None):
        raise TypeError('imageNew : width and height must be given if data is not a list')
      else:
        return self.internalImageNew(width,height,data,format)
    def drawPolygon(self, x ,y):
      self.internalDrawPolygon(x,y,min(len(x),len(y)))
    def fillPolygon(self, x ,y):
      self.internalFillPolygon(x,y,min(len(x),len(y)))

Display_swigregister = _controller.Display_swigregister
Display_swigregister(Display)

class DistanceSensor(Device):
    __swig_setmethods__ = {}
    for _s in [Device]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistanceSensor, name, value)
    __swig_getmethods__ = {}
    for _s in [Device]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DistanceSensor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _controller.new_DistanceSensor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _controller.delete_DistanceSensor
    __del__ = lambda self : None;
    def enable(self, *args): return _controller.DistanceSensor_enable(self, *args)
    def disable(self): return _controller.DistanceSensor_disable(self)
    def getSamplingPeriod(self): return _controller.DistanceSensor_getSamplingPeriod(self)
    def getValue(self): return _controller.DistanceSensor_getValue(self)
DistanceSensor_swigregister = _controller.DistanceSensor_swigregister
DistanceSensor_swigregister(DistanceSensor)

class Emitter(Device):
    __swig_setmethods__ = {}
    for _s in [Device]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Emitter, name, value)
    __swig_getmethods__ = {}
    for _s in [Device]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Emitter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _controller.new_Emitter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _controller.delete_Emitter
    __del__ = lambda self : None;
    CHANNEL_BROADCAST = _controller.Emitter_CHANNEL_BROADCAST
    def send(self, *args): return _controller.Emitter_send(self, *args)
    def getBufferSize(self): return _controller.Emitter_getBufferSize(self)
    def setChannel(self, *args): return _controller.Emitter_setChannel(self, *args)
    def getChannel(self): return _controller.Emitter_getChannel(self)
    def getRange(self): return _controller.Emitter_getRange(self)
    def setRange(self, *args): return _controller.Emitter_setRange(self, *args)
Emitter_swigregister = _controller.Emitter_swigregister
Emitter_swigregister(Emitter)

class Field(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Field, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Field, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SF_BOOL = _controller.Field_SF_BOOL
    SF_INT32 = _controller.Field_SF_INT32
    SF_FLOAT = _controller.Field_SF_FLOAT
    SF_VEC2F = _controller.Field_SF_VEC2F
    SF_VEC3F = _controller.Field_SF_VEC3F
    SF_ROTATION = _controller.Field_SF_ROTATION
    SF_COLOR = _controller.Field_SF_COLOR
    SF_STRING = _controller.Field_SF_STRING
    SF_NODE = _controller.Field_SF_NODE
    MF = _controller.Field_MF
    MF_INT32 = _controller.Field_MF_INT32
    MF_FLOAT = _controller.Field_MF_FLOAT
    MF_VEC2F = _controller.Field_MF_VEC2F
    MF_VEC3F = _controller.Field_MF_VEC3F
    MF_COLOR = _controller.Field_MF_COLOR
    MF_STRING = _controller.Field_MF_STRING
    MF_NODE = _controller.Field_MF_NODE
    def getType(self): return _controller.Field_getType(self)
    def getTypeName(self): return _controller.Field_getTypeName(self)
    def getCount(self): return _controller.Field_getCount(self)
    def getSFBool(self): return _controller.Field_getSFBool(self)
    def getSFInt32(self): return _controller.Field_getSFInt32(self)
    def getSFFloat(self): return _controller.Field_getSFFloat(self)
    def getSFVec2f(self): return _controller.Field_getSFVec2f(self)
    def getSFVec3f(self): return _controller.Field_getSFVec3f(self)
    def getSFRotation(self): return _controller.Field_getSFRotation(self)
    def getSFColor(self): return _controller.Field_getSFColor(self)
    def getSFString(self): return _controller.Field_getSFString(self)
    def getSFNode(self): return _controller.Field_getSFNode(self)
    def getMFInt32(self, *args): return _controller.Field_getMFInt32(self, *args)
    def getMFFloat(self, *args): return _controller.Field_getMFFloat(self, *args)
    def getMFVec2f(self, *args): return _controller.Field_getMFVec2f(self, *args)
    def getMFVec3f(self, *args): return _controller.Field_getMFVec3f(self, *args)
    def getMFColor(self, *args): return _controller.Field_getMFColor(self, *args)
    def getMFString(self, *args): return _controller.Field_getMFString(self, *args)
    def getMFNode(self, *args): return _controller.Field_getMFNode(self, *args)
    def setSFBool(self, *args): return _controller.Field_setSFBool(self, *args)
    def setSFInt32(self, *args): return _controller.Field_setSFInt32(self, *args)
    def setSFFloat(self, *args): return _controller.Field_setSFFloat(self, *args)
    def setSFVec2f(self, *args): return _controller.Field_setSFVec2f(self, *args)
    def setSFVec3f(self, *args): return _controller.Field_setSFVec3f(self, *args)
    def setSFRotation(self, *args): return _controller.Field_setSFRotation(self, *args)
    def setSFColor(self, *args): return _controller.Field_setSFColor(self, *args)
    def setSFString(self, *args): return _controller.Field_setSFString(self, *args)
    def setMFInt32(self, *args): return _controller.Field_setMFInt32(self, *args)
    def setMFFloat(self, *args): return _controller.Field_setMFFloat(self, *args)
    def setMFVec2f(self, *args): return _controller.Field_setMFVec2f(self, *args)
    def setMFVec3f(self, *args): return _controller.Field_setMFVec3f(self, *args)
    def setMFColor(self, *args): return _controller.Field_setMFColor(self, *args)
    def setMFString(self, *args): return _controller.Field_setMFString(self, *args)
    def importMFNode(self, *args): return _controller.Field_importMFNode(self, *args)
Field_swigregister = _controller.Field_swigregister
Field_swigregister(Field)

class GPS(Device):
    __swig_setmethods__ = {}
    for _s in [Device]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GPS, name, value)
    __swig_getmethods__ = {}
    for _s in [Device]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GPS, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _controller.new_GPS(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _controller.delete_GPS
    __del__ = lambda self : None;
    def enable(self, *args): return _controller.GPS_enable(self, *args)
    def disable(self): return _controller.GPS_disable(self)
    def getSamplingPeriod(self): return _controller.GPS_getSamplingPeriod(self)
    def getValues(self): return _controller.GPS_getValues(self)
GPS_swigregister = _controller.GPS_swigregister
GPS_swigregister(GPS)

class Gyro(Device):
    __swig_setmethods__ = {}
    for _s in [Device]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gyro, name, value)
    __swig_getmethods__ = {}
    for _s in [Device]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Gyro, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _controller.new_Gyro(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _controller.delete_Gyro
    __del__ = lambda self : None;
    def enable(self, *args): return _controller.Gyro_enable(self, *args)
    def disable(self): return _controller.Gyro_disable(self)
    def getSamplingPeriod(self): return _controller.Gyro_getSamplingPeriod(self)
    def getValues(self): return _controller.Gyro_getValues(self)
Gyro_swigregister = _controller.Gyro_swigregister
Gyro_swigregister(Gyro)

class InertialUnit(Device):
    __swig_setmethods__ = {}
    for _s in [Device]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InertialUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [Device]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InertialUnit, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _controller.new_InertialUnit(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _controller.delete_InertialUnit
    __del__ = lambda self : None;
    def enable(self, *args): return _controller.InertialUnit_enable(self, *args)
    def disable(self): return _controller.InertialUnit_disable(self)
    def getSamplingPeriod(self): return _controller.InertialUnit_getSamplingPeriod(self)
    def getRollPitchYaw(self): return _controller.InertialUnit_getRollPitchYaw(self)
InertialUnit_swigregister = _controller.InertialUnit_swigregister
InertialUnit_swigregister(InertialUnit)

class LED(Device):
    __swig_setmethods__ = {}
    for _s in [Device]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LED, name, value)
    __swig_getmethods__ = {}
    for _s in [Device]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LED, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _controller.new_LED(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _controller.delete_LED
    __del__ = lambda self : None;
    def set(self, *args): return _controller.LED_set(self, *args)
    def get(self): return _controller.LED_get(self)
LED_swigregister = _controller.LED_swigregister
LED_swigregister(LED)

class LightSensor(Device):
    __swig_setmethods__ = {}
    for _s in [Device]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightSensor, name, value)
    __swig_getmethods__ = {}
    for _s in [Device]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LightSensor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _controller.new_LightSensor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _controller.delete_LightSensor
    __del__ = lambda self : None;
    def enable(self, *args): return _controller.LightSensor_enable(self, *args)
    def disable(self): return _controller.LightSensor_disable(self)
    def getSamplingPeriod(self): return _controller.LightSensor_getSamplingPeriod(self)
    def getValue(self): return _controller.LightSensor_getValue(self)
LightSensor_swigregister = _controller.LightSensor_swigregister
LightSensor_swigregister(LightSensor)

class Motion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _controller.new_Motion(*args)
        try: self.this.append(this)
        except: self.this = this
    def isValid(self): return _controller.Motion_isValid(self)
    __swig_destroy__ = _controller.delete_Motion
    __del__ = lambda self : None;
    def play(self): return _controller.Motion_play(self)
    def stop(self): return _controller.Motion_stop(self)
    def getDuration(self): return _controller.Motion_getDuration(self)
    def getTime(self): return _controller.Motion_getTime(self)
    def setTime(self, *args): return _controller.Motion_setTime(self, *args)
    def setReverse(self, *args): return _controller.Motion_setReverse(self, *args)
    def setLoop(self, *args): return _controller.Motion_setLoop(self, *args)
    def isOver(self): return _controller.Motion_isOver(self)
Motion_swigregister = _controller.Motion_swigregister
Motion_swigregister(Motion)

class Motor(Device):
    __swig_setmethods__ = {}
    for _s in [Device]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motor, name, value)
    __swig_getmethods__ = {}
    for _s in [Device]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Motor, name)
    __repr__ = _swig_repr
    ROTATIONAL = _controller.Motor_ROTATIONAL
    LINEAR = _controller.Motor_LINEAR
    def __init__(self, *args): 
        this = _controller.new_Motor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _controller.delete_Motor
    __del__ = lambda self : None;
    def setPosition(self, *args): return _controller.Motor_setPosition(self, *args)
    def getTargetposition(self): return _controller.Motor_getTargetposition(self)
    def setVelocity(self, *args): return _controller.Motor_setVelocity(self, *args)
    def setAcceleration(self, *args): return _controller.Motor_setAcceleration(self, *args)
    def setAvailableForce(self, *args): return _controller.Motor_setAvailableForce(self, *args)
    def setAvailableTorque(self, *args): return _controller.Motor_setAvailableTorque(self, *args)
    def setControlPID(self, *args): return _controller.Motor_setControlPID(self, *args)
    def getMinPosition(self): return _controller.Motor_getMinPosition(self)
    def getMaxPosition(self): return _controller.Motor_getMaxPosition(self)
    def enablePosition(self, *args): return _controller.Motor_enablePosition(self, *args)
    def disablePosition(self): return _controller.Motor_disablePosition(self)
    def getPositionSamplingPeriod(self): return _controller.Motor_getPositionSamplingPeriod(self)
    def getPosition(self): return _controller.Motor_getPosition(self)
    def enableForceFeedback(self, *args): return _controller.Motor_enableForceFeedback(self, *args)
    def disableForceFeedback(self): return _controller.Motor_disableForceFeedback(self)
    def getForceFeedbackSamplingPeriod(self): return _controller.Motor_getForceFeedbackSamplingPeriod(self)
    def getForceFeedback(self): return _controller.Motor_getForceFeedback(self)
    def enableTorqueFeedback(self, *args): return _controller.Motor_enableTorqueFeedback(self, *args)
    def disableTorqueFeedback(self): return _controller.Motor_disableTorqueFeedback(self)
    def getTorqueFeedbackSamplingPeriod(self): return _controller.Motor_getTorqueFeedbackSamplingPeriod(self)
    def getTorqueFeedback(self): return _controller.Motor_getTorqueFeedback(self)
    def setForce(self, *args): return _controller.Motor_setForce(self, *args)
    def setTorque(self, *args): return _controller.Motor_setTorque(self, *args)
    def getType(self): return _controller.Motor_getType(self)
Motor_swigregister = _controller.Motor_swigregister
Motor_swigregister(Motor)

class Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    NO_NODE = _controller.Node_NO_NODE
    APPEARANCE = _controller.Node_APPEARANCE
    BACKGROUND = _controller.Node_BACKGROUND
    BOX = _controller.Node_BOX
    COLOR = _controller.Node_COLOR
    CONE = _controller.Node_CONE
    COORDINATE = _controller.Node_COORDINATE
    CYLINDER = _controller.Node_CYLINDER
    DIRECTIONAL_LIGHT = _controller.Node_DIRECTIONAL_LIGHT
    ELEVATION_GRID = _controller.Node_ELEVATION_GRID
    EXTRUSION = _controller.Node_EXTRUSION
    FOG = _controller.Node_FOG
    GROUP = _controller.Node_GROUP
    IMAGE_TEXTURE = _controller.Node_IMAGE_TEXTURE
    INDEXED_FACE_SET = _controller.Node_INDEXED_FACE_SET
    INDEXED_LINE_SET = _controller.Node_INDEXED_LINE_SET
    MATERIAL = _controller.Node_MATERIAL
    POINT_LIGHT = _controller.Node_POINT_LIGHT
    SHAPE = _controller.Node_SHAPE
    SPHERE = _controller.Node_SPHERE
    SPOT_LIGHT = _controller.Node_SPOT_LIGHT
    SWITCH = _controller.Node_SWITCH
    TEXTURE_COORDINATE = _controller.Node_TEXTURE_COORDINATE
    TEXTURE_TRANSFORM = _controller.Node_TEXTURE_TRANSFORM
    TRANSFORM = _controller.Node_TRANSFORM
    VIEWPOINT = _controller.Node_VIEWPOINT
    WORLD_INFO = _controller.Node_WORLD_INFO
    CAPSULE = _controller.Node_CAPSULE
    PLANE = _controller.Node_PLANE
    ROBOT = _controller.Node_ROBOT
    SUPERVISOR = _controller.Node_SUPERVISOR
    DIFFERENTIAL_WHEELS = _controller.Node_DIFFERENTIAL_WHEELS
    BALL_JOINT = _controller.Node_BALL_JOINT
    BALL_JOINT_PARAMETERS = _controller.Node_BALL_JOINT_PARAMETERS
    CAMERA_ZOOM = _controller.Node_CAMERA_ZOOM
    CHARGER = _controller.Node_CHARGER
    CONTACT_PROPERTIES = _controller.Node_CONTACT_PROPERTIES
    DAMPING = _controller.Node_DAMPING
    HINGE_JOINT = _controller.Node_HINGE_JOINT
    HINGE_JOINT_PARAMETERS = _controller.Node_HINGE_JOINT_PARAMETERS
    HINGE_2_JOINT_PARAMETERS = _controller.Node_HINGE_2_JOINT_PARAMETERS
    HINGE_2_JOINT = _controller.Node_HINGE_2_JOINT
    JOINT_PARAMETERS = _controller.Node_JOINT_PARAMETERS
    PHYSICS = _controller.Node_PHYSICS
    SLIDER_JOINT = _controller.Node_SLIDER_JOINT
    SOLID = _controller.Node_SOLID
    SOLID_REFERENCE = _controller.Node_SOLID_REFERENCE
    ACCELEROMETER = _controller.Node_ACCELEROMETER
    CAMERA = _controller.Node_CAMERA
    COMPASS = _controller.Node_COMPASS
    CONNECTOR = _controller.Node_CONNECTOR
    DISPLAY = _controller.Node_DISPLAY
    DISTANCE_SENSOR = _controller.Node_DISTANCE_SENSOR
    EMITTER = _controller.Node_EMITTER
    GPS = _controller.Node_GPS
    GYRO = _controller.Node_GYRO
    INERTIAL_UNIT = _controller.Node_INERTIAL_UNIT
    LED = _controller.Node_LED
    LIGHT_SENSOR = _controller.Node_LIGHT_SENSOR
    LINEAR_MOTOR = _controller.Node_LINEAR_MOTOR
    MICROPHONE = _controller.Node_MICROPHONE
    PEN = _controller.Node_PEN
    POSITION_SENSOR = _controller.Node_POSITION_SENSOR
    PROPELLER = _controller.Node_PROPELLER
    RADIO = _controller.Node_RADIO
    ROTATIONAL_MOTOR = _controller.Node_ROTATIONAL_MOTOR
    RECEIVER = _controller.Node_RECEIVER
    SERVO = _controller.Node_SERVO
    SPEAKER = _controller.Node_SPEAKER
    TOUCH_SENSOR = _controller.Node_TOUCH_SENSOR
    def getType(self): return _controller.Node_getType(self)
    def getTypeName(self): return _controller.Node_getTypeName(self)
    def getField(self, *args): return _controller.Node_getField(self, *args)
    def getPosition(self): return _controller.Node_getPosition(self)
    def getOrientation(self): return _controller.Node_getOrientation(self)
    def getCenterOfMass(self): return _controller.Node_getCenterOfMass(self)
    def getContactPoint(self, *args): return _controller.Node_getContactPoint(self, *args)
    def getNumberOfContactPoints(self): return _controller.Node_getNumberOfContactPoints(self)
    def getStaticBalance(self): return _controller.Node_getStaticBalance(self)
Node_swigregister = _controller.Node_swigregister
Node_swigregister(Node)

class Pen(Device):
    __swig_setmethods__ = {}
    for _s in [Device]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pen, name, value)
    __swig_getmethods__ = {}
    for _s in [Device]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pen, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _controller.new_Pen(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _controller.delete_Pen
    __del__ = lambda self : None;
    def write(self, *args): return _controller.Pen_write(self, *args)
    def setInkColor(self, *args): return _controller.Pen_setInkColor(self, *args)
Pen_swigregister = _controller.Pen_swigregister
Pen_swigregister(Pen)

class PositionSensor(Device):
    __swig_setmethods__ = {}
    for _s in [Device]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositionSensor, name, value)
    __swig_getmethods__ = {}
    for _s in [Device]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PositionSensor, name)
    __repr__ = _swig_repr
    ANGULAR = _controller.PositionSensor_ANGULAR
    LINEAR = _controller.PositionSensor_LINEAR
    def __init__(self, *args): 
        this = _controller.new_PositionSensor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _controller.delete_PositionSensor
    __del__ = lambda self : None;
    def enable(self, *args): return _controller.PositionSensor_enable(self, *args)
    def disable(self): return _controller.PositionSensor_disable(self)
    def getSamplingPeriod(self): return _controller.PositionSensor_getSamplingPeriod(self)
    def getValue(self): return _controller.PositionSensor_getValue(self)
    def getType(self): return _controller.PositionSensor_getType(self)
PositionSensor_swigregister = _controller.PositionSensor_swigregister
PositionSensor_swigregister(PositionSensor)

class Receiver(Device):
    __swig_setmethods__ = {}
    for _s in [Device]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Receiver, name, value)
    __swig_getmethods__ = {}
    for _s in [Device]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Receiver, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _controller.new_Receiver(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _controller.delete_Receiver
    __del__ = lambda self : None;
    CHANNEL_BROADCAST = _controller.Receiver_CHANNEL_BROADCAST
    def enable(self, *args): return _controller.Receiver_enable(self, *args)
    def disable(self): return _controller.Receiver_disable(self)
    def getSamplingPeriod(self): return _controller.Receiver_getSamplingPeriod(self)
    def setChannel(self, *args): return _controller.Receiver_setChannel(self, *args)
    def getChannel(self): return _controller.Receiver_getChannel(self)
    def getQueueLength(self): return _controller.Receiver_getQueueLength(self)
    def nextPacket(self): return _controller.Receiver_nextPacket(self)
    def getDataSize(self): return _controller.Receiver_getDataSize(self)
    def getData(self): return _controller.Receiver_getData(self)
    def getSignalStrength(self): return _controller.Receiver_getSignalStrength(self)
    def getEmitterDirection(self): return _controller.Receiver_getEmitterDirection(self)
Receiver_swigregister = _controller.Receiver_swigregister
Receiver_swigregister(Receiver)

class Servo(Device):
    __swig_setmethods__ = {}
    for _s in [Device]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Servo, name, value)
    __swig_getmethods__ = {}
    for _s in [Device]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Servo, name)
    __repr__ = _swig_repr
    ROTATIONAL = _controller.Servo_ROTATIONAL
    LINEAR = _controller.Servo_LINEAR
    def __init__(self, *args): 
        this = _controller.new_Servo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _controller.delete_Servo
    __del__ = lambda self : None;
    def setAcceleration(self, *args): return _controller.Servo_setAcceleration(self, *args)
    def setVelocity(self, *args): return _controller.Servo_setVelocity(self, *args)
    def enablePosition(self, *args): return _controller.Servo_enablePosition(self, *args)
    def disablePosition(self): return _controller.Servo_disablePosition(self)
    def setForce(self, *args): return _controller.Servo_setForce(self, *args)
    def setMotorForce(self, *args): return _controller.Servo_setMotorForce(self, *args)
    def setControlP(self, *args): return _controller.Servo_setControlP(self, *args)
    def enableMotorForceFeedback(self, *args): return _controller.Servo_enableMotorForceFeedback(self, *args)
    def disableMotorForceFeedback(self): return _controller.Servo_disableMotorForceFeedback(self)
    def getMotorForceFeedback(self): return _controller.Servo_getMotorForceFeedback(self)
    def getPosition(self): return _controller.Servo_getPosition(self)
    def setPosition(self, *args): return _controller.Servo_setPosition(self, *args)
    def getMotorForceFeedbackSamplingPeriod(self): return _controller.Servo_getMotorForceFeedbackSamplingPeriod(self)
    def getPositionSamplingPeriod(self): return _controller.Servo_getPositionSamplingPeriod(self)
    def getType(self): return _controller.Servo_getType(self)
    def getTargetposition(self): return _controller.Servo_getTargetposition(self)
    def getMinPosition(self): return _controller.Servo_getMinPosition(self)
    def getMaxPosition(self): return _controller.Servo_getMaxPosition(self)
Servo_swigregister = _controller.Servo_swigregister
Servo_swigregister(Servo)

class TouchSensor(Device):
    __swig_setmethods__ = {}
    for _s in [Device]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TouchSensor, name, value)
    __swig_getmethods__ = {}
    for _s in [Device]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TouchSensor, name)
    __repr__ = _swig_repr
    BUMPER = _controller.TouchSensor_BUMPER
    FORCE = _controller.TouchSensor_FORCE
    FORCE3D = _controller.TouchSensor_FORCE3D
    def __init__(self, *args): 
        this = _controller.new_TouchSensor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _controller.delete_TouchSensor
    __del__ = lambda self : None;
    def enable(self, *args): return _controller.TouchSensor_enable(self, *args)
    def disable(self): return _controller.TouchSensor_disable(self)
    def getSamplingPeriod(self): return _controller.TouchSensor_getSamplingPeriod(self)
    def getValue(self): return _controller.TouchSensor_getValue(self)
    def getValues(self): return _controller.TouchSensor_getValues(self)
    def getType(self): return _controller.TouchSensor_getType(self)
TouchSensor_swigregister = _controller.TouchSensor_swigregister
TouchSensor_swigregister(TouchSensor)

class Robot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Robot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Robot, name)
    __repr__ = _swig_repr
    MODE_SIMULATION = _controller.Robot_MODE_SIMULATION
    MODE_CROSS_COMPILATION = _controller.Robot_MODE_CROSS_COMPILATION
    MODE_REMOTE_CONTROL = _controller.Robot_MODE_REMOTE_CONTROL
    KEYBOARD_END = _controller.Robot_KEYBOARD_END
    KEYBOARD_HOME = _controller.Robot_KEYBOARD_HOME
    KEYBOARD_LEFT = _controller.Robot_KEYBOARD_LEFT
    KEYBOARD_UP = _controller.Robot_KEYBOARD_UP
    KEYBOARD_RIGHT = _controller.Robot_KEYBOARD_RIGHT
    KEYBOARD_DOWN = _controller.Robot_KEYBOARD_DOWN
    KEYBOARD_PAGEUP = _controller.Robot_KEYBOARD_PAGEUP
    KEYBOARD_PAGEDOWN = _controller.Robot_KEYBOARD_PAGEDOWN
    KEYBOARD_NUMPAD_HOME = _controller.Robot_KEYBOARD_NUMPAD_HOME
    KEYBOARD_NUMPAD_LEFT = _controller.Robot_KEYBOARD_NUMPAD_LEFT
    KEYBOARD_NUMPAD_UP = _controller.Robot_KEYBOARD_NUMPAD_UP
    KEYBOARD_NUMPAD_RIGHT = _controller.Robot_KEYBOARD_NUMPAD_RIGHT
    KEYBOARD_NUMPAD_DOWN = _controller.Robot_KEYBOARD_NUMPAD_DOWN
    KEYBOARD_NUMPAD_END = _controller.Robot_KEYBOARD_NUMPAD_END
    KEYBOARD_KEY = _controller.Robot_KEYBOARD_KEY
    KEYBOARD_SHIFT = _controller.Robot_KEYBOARD_SHIFT
    KEYBOARD_CONTROL = _controller.Robot_KEYBOARD_CONTROL
    KEYBOARD_ALT = _controller.Robot_KEYBOARD_ALT
    def __init__(self): 
        this = _controller.new_Robot()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _controller.delete_Robot
    __del__ = lambda self : None;
    def step(self, *args): return _controller.Robot_step(self, *args)
    def getName(self): return _controller.Robot_getName(self)
    def getControllerName(self): return _controller.Robot_getControllerName(self)
    def getControllerArguments(self): return _controller.Robot_getControllerArguments(self)
    def getTime(self): return _controller.Robot_getTime(self)
    def getModel(self): return _controller.Robot_getModel(self)
    def getMode(self): return _controller.Robot_getMode(self)
    def setMode(self, *args): return _controller.Robot_setMode(self, *args)
    def getSynchronization(self): return _controller.Robot_getSynchronization(self)
    def getProjectPath(self): return _controller.Robot_getProjectPath(self)
    def getBasicTimeStep(self): return _controller.Robot_getBasicTimeStep(self)
    def getNumberOfDevices(self): return _controller.Robot_getNumberOfDevices(self)
    def getDeviceByIndex(self, *args): return _controller.Robot_getDeviceByIndex(self, *args)
    def getType(self): return _controller.Robot_getType(self)
    def batterySensorEnable(self, *args): return _controller.Robot_batterySensorEnable(self, *args)
    def batterySensorDisable(self): return _controller.Robot_batterySensorDisable(self)
    def batterySensorGetSamplingPeriod(self): return _controller.Robot_batterySensorGetSamplingPeriod(self)
    def batterySensorGetValue(self): return _controller.Robot_batterySensorGetValue(self)
    def keyboardEnable(self, *args): return _controller.Robot_keyboardEnable(self, *args)
    def keyboardDisable(self): return _controller.Robot_keyboardDisable(self)
    def keyboardGetKey(self): return _controller.Robot_keyboardGetKey(self)
    devices = {}
    def createAccelerometer(self, name):
      return Accelerometer(name)
    def getAccelerometer(self,name):
      if (self.devices.has_key(name)):
        return self.devices[name]
      if (not Device.exists(name)):
        return None
      accelerometer = self.createAccelerometer(name)
      self.devices[name] = accelerometer
      return accelerometer
    def createCamera(self, name):
      return Camera(name)
    def getCamera(self,name):
      if (self.devices.has_key(name)):
        return self.devices[name]
      if (not Device.exists(name)):
        return None
      camera = self.createCamera(name)
      self.devices[name] = camera
      return camera
    def createCompass(self, name):
      return Compass(name)
    def getCompass(self,name):
      if (self.devices.has_key(name)):
        return self.devices[name]
      if (not Device.exists(name)):
        return None
      compass = self.createCompass(name)
      self.devices[name] = compass
      return compass
    def createConnector(self, name):
      return Connector(name)
    def getConnector(self,name):
      if (self.devices.has_key(name)):
        return self.devices[name]
      if (not Device.exists(name)):
        return None
      connector = self.createConnector(name)
      self.devices[name] = connector
      return connector
    def createDisplay(self, name):
      return Display(name)
    def getDisplay(self,name):
      if (self.devices.has_key(name)):
        return self.devices[name]
      if (not Device.exists(name)):
        return None
      display = self.createDisplay(name)
      self.devices[name] = display
      return display
    def createDistanceSensor(self, name):
      return DistanceSensor(name)
    def getDistanceSensor(self,name):
      if (self.devices.has_key(name)):
        return self.devices[name]
      if (not Device.exists(name)):
        return None
      distanceSensor = self.createDistanceSensor(name)
      self.devices[name] = distanceSensor
      return distanceSensor
    def createEmitter(self, name):
      return Emitter(name)
    def getEmitter(self,name):
      if (self.devices.has_key(name)):
        return self.devices[name]
      if (not Device.exists(name)):
        return None
      emitter = self.createEmitter(name)
      self.devices[name] = emitter
      return emitter
    def createGPS(self, name):
      return GPS(name)
    def getGPS(self,name):
      if (self.devices.has_key(name)):
        return self.devices[name]
      if (not Device.exists(name)):
        return None
      gps = self.createGPS(name)
      self.devices[name] = gps
      return gps
    def createGyro(self, name):
      return Gyro(name)
    def getGyro(self,name):
      if (self.devices.has_key(name)):
        return self.devices[name]
      if (not Device.exists(name)):
        return None
      gyro = self.createGyro(name)
      self.devices[name] = gyro
      return gyro
    def createInertialUnit(self, name):
      return InertialUnit(name)
    def getInertialUnit(self,name):
      if (self.devices.has_key(name)):
        return self.devices[name]
      if (not Device.exists(name)):
        return None
      inertialUnit = self.createInertialUnit(name)
      self.devices[name] = inertialUnit
      return inertialUnit
    def createLED(self, name):
      return LED(name)
    def getLED(self,name):
      if (self.devices.has_key(name)):
        return self.devices[name]
      if (not Device.exists(name)):
        return None
      led = self.createLED(name)
      self.devices[name] = led
      return led
    def createLightSensor(self, name):
      return LightSensor(name)
    def getLightSensor(self,name):
      if (self.devices.has_key(name)):
        return self.devices[name]
      if (not Device.exists(name)):
        return None
      lightSensor = self.createLightSensor(name)
      self.devices[name] = lightSensor
      return lightSensor
    def createMotor(self, name):
      return Motor(name)
    def getMotor(self,name):
      if (self.devices.has_key(name)):
        return self.devices[name]
      if (not Device.exists(name)):
        return None
      motor = self.createMotor(name)
      self.devices[name] = motor
      return motor
    def createPen(self, name):
      return Pen(name)
    def getPen(self,name):
      if (self.devices.has_key(name)):
        return self.devices[name]
      if (not Device.exists(name)):
        return None
      pen = self.createPen(name)
      self.devices[name] = pen
      return pen
    def createPositionSensor(self, name):
      return PositionSensor(name)
    def getPositionSensor(self,name):
      if (self.devices.has_key(name)):
        return self.devices[name]
      if (not Device.exists(name)):
        return None
      positionSensor = self.createPositionSensor(name)
      self.devices[name] = positionSensor
      return positionSensor
    def createReceiver(self, name):
      return Receiver(name)
    def getReceiver(self,name):
      if (self.devices.has_key(name)):
        return self.devices[name]
      if (not Device.exists(name)):
        return None
      receiver = self.createReceiver(name)
      self.devices[name] = receiver
      return receiver
    def createServo(self, name):
      return Servo(name)
    def getServo(self,name):
      if (self.devices.has_key(name)):
        return self.devices[name]
      if (not Device.exists(name)):
        return None
      servo = self.createServo(name)
      self.devices[name] = servo
      return servo
    def createTouchSensor(self, name):
      return TouchSensor(name)
    def getTouchSensor(self,name):
      if (self.devices.has_key(name)):
        return self.devices[name]
      if (not Device.exists(name)):
        return None
      touchSensor = self.createTouchSensor(name)
      self.devices[name] = touchSensor
      return touchSensor

Robot_swigregister = _controller.Robot_swigregister
Robot_swigregister(Robot)

class DifferentialWheels(Robot):
    __swig_setmethods__ = {}
    for _s in [Robot]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DifferentialWheels, name, value)
    __swig_getmethods__ = {}
    for _s in [Robot]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DifferentialWheels, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _controller.new_DifferentialWheels()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _controller.delete_DifferentialWheels
    __del__ = lambda self : None;
    def setSpeed(self, *args): return _controller.DifferentialWheels_setSpeed(self, *args)
    def getLeftSpeed(self): return _controller.DifferentialWheels_getLeftSpeed(self)
    def getRightSpeed(self): return _controller.DifferentialWheels_getRightSpeed(self)
    def getMaxSpeed(self): return _controller.DifferentialWheels_getMaxSpeed(self)
    def getSpeedUnit(self): return _controller.DifferentialWheels_getSpeedUnit(self)
    def enableEncoders(self, *args): return _controller.DifferentialWheels_enableEncoders(self, *args)
    def disableEncoders(self): return _controller.DifferentialWheels_disableEncoders(self)
    def getEncodersSamplingPeriod(self): return _controller.DifferentialWheels_getEncodersSamplingPeriod(self)
    def getLeftEncoder(self): return _controller.DifferentialWheels_getLeftEncoder(self)
    def getRightEncoder(self): return _controller.DifferentialWheels_getRightEncoder(self)
    def setEncoders(self, *args): return _controller.DifferentialWheels_setEncoders(self, *args)
DifferentialWheels_swigregister = _controller.DifferentialWheels_swigregister
DifferentialWheels_swigregister(DifferentialWheels)

class Supervisor(Robot):
    __swig_setmethods__ = {}
    for _s in [Robot]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Supervisor, name, value)
    __swig_getmethods__ = {}
    for _s in [Robot]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Supervisor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _controller.new_Supervisor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _controller.delete_Supervisor
    __del__ = lambda self : None;
    def simulationQuit(self, *args): return _controller.Supervisor_simulationQuit(self, *args)
    def simulationRevert(self): return _controller.Supervisor_simulationRevert(self)
    def simulationPhysicsReset(self): return _controller.Supervisor_simulationPhysicsReset(self)
    def exportImage(self, *args): return _controller.Supervisor_exportImage(self, *args)
    def startMovie(self, *args): return _controller.Supervisor_startMovie(self, *args)
    def stopMovie(self): return _controller.Supervisor_stopMovie(self)
    def setLabel(self, *args): return _controller.Supervisor_setLabel(self, *args)
    def getRoot(self): return _controller.Supervisor_getRoot(self)
    def getFromDef(self, *args): return _controller.Supervisor_getFromDef(self, *args)
Supervisor_swigregister = _controller.Supervisor_swigregister
Supervisor_swigregister(Supervisor)

# This file is compatible with both classic and new-style classes.


